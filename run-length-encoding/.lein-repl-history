(partition-by identity "WWWWWWWWWWWWBWWWWWWWWWWWWB")
(map-cat (juxt count first) (partition-by identity "WWWWWWWWWWWWBWWWWWWWWWWWWB"))
(mapcat (juxt count first) (partition-by identity "WWWWWWWWWWWWBWWWWWWWWWWWWB"))
(apply str (mapcat (juxt count first) (partition-by identity "WWWWWWWWWWWWBWWWWWWWWWWWWB")))
(defn compress [s]
(partition-by identity "wwwwwwwwwwwwbbbb")
(mapcat (juxt count first) (partition-by identity "wwwwwwwwwwwwbbbb"))
(mapcat (juxt count first) (partition-by identity "wb"))
(doc juxt)
(mapcat (if (> (count first) 1) (juxt count first) "") (partition-by identity "wb"))
(concat "" 'a)
(concat "" "a")
(apply str (concat "" "a"))
(partition-by identity "qqqqqqqqqqqwwwwwwwwwwwc")
(empty ())
(empty? ())
(str 3)
(str "" 2)
(set '(a a a))
(first (set '(a a a)))
(str (first (set '(a a a))))
(clojure.string/split "\D" "12w4b")
(clojure.string/split "[digit]" "12w4b")
(clojure.string/split "[0-9]" "12w4b")
(clojure.string/split "0123456789" "12w4b")
(doc clojure.string/split)
(clojure.string/split "12w4b" "[0-9]+")
(clojure.string/split "12w4b" "\D")
(clojure.string/split "first last" " ")
(split "first last" " ")
(clojure.string/split "first last" #" ")
(clojure.string/split "12w4b" #" ")
(clojure.string/split "12w4b" #"D")
(clojure.string/split "12w4b" #"\D")
(clojure.string/split "12w4b" #"\DA")
(clojure.string/split "12w4b" #"\D")
(clojure.string/split "12w4b" #"\A")
(clojure.string/split "12w4b" #"\a")
(clojure.string/split "12w4b" #"\L")
(clojure.string/split "12w4b" #"\S")
(clojure.string/split "12w4b" #"\B")
(clojure.string/split "12w4b" #"\C")
(clojure.string/split "12w4b" #"\A")
(clojure.string/split "12w4b" #"\N")
(clojure.string/split "12w4b" #"\M")
(clojure.string/split "12w4b" #"\H")
(clojure.string/split "12w4b" #"\C")
(clojure.string/split "12w4b" #"\B")
(clojure.string/split "12w4b" #"\E")
(clojure.string/split "12w4b" #"\F")
(clojure.string/split "12w4b" #"\G")
(clojure.string/split "12w4b" #"\H")
(clojure.string/split "12w4b" #"\I")
(clojure.string/split "12w4b" #"\J")
(clojure.string/split "12w4b" #"\K")
(clojure.string/split "12w4b" #"\L")
(clojure.string/split "12w4b" #"\M")
(clojure.string/split "12w4b" #"\O")
(clojure.string/split "12w4b" #"\P")
(clojure.string/split "12w4b" #"\Q")
(clojure.string/split "12w4b" #"\d+")
(rest (clojure.string/split "12w4b" #"\d+"))
(doc zip)
(clojure.string/split "12w4b" #"\D")
(repeat 3 5)
(zipmap '(12 4) '(w b))
(map (fn [n l] (repeat n l)) '(12 4) '(w b))
(map (fn [n l] (apply str (repeat n l))) '(12 4) '(w b))
(apply str (map (fn [n l] (apply str (repeat n l))) '(12 4) '(w b)))
(empty? "")
(clojure.string/split "XYZ" #"\D")
(re-seq #"(\d+)?([\^d])" "12w4b")
(defn run-length-decode
  "decodes a run-length-encoded string"
  [s]
  (->> s
       (re-seq #"(\d+)?([^\d])")
       (mapcat
        (fn [[_ occurances char]]
          (if (some? occurances)
            (repeat (bigint occurances) char)
            char)))
       (apply str)))
(run-length-decode "12w3b4drt)
(run-length-decode "12w3b4drt")
(re-seq #"(\d*)(\D)" "12w4b5r6teg")
(["12w" "12" "w"] 1)
