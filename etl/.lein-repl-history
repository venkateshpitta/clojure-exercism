(def db {1 ["WORLD"]})
db
[(vals db) (keys db)]
(into {} [(vals db) (keys db)])
(into {} [(into "" (vals db)) (keys db)])
[(into "" (vals db)) (keys db)]
[(into seq (vals db)) (keys db)]
[(into {} (vals db)) (keys db)]
[(into [] (vals db)) (keys db)]
[(into [] (vals db)) (into [] (keys db))]
(doc nth)
[(into [] (vals db)) (into [] (keys db))]
(into [] (vals db)) (into [] (keys db))
(vals db) (keys db)
(doc conj!)
(doc conj)
(conj {} ["ASD" 2])
(reduce 0 + '(1 2 3 4))
(reduce 0 + (1 2 3 4))
(reduce 0 + [1 2 3 4])
(doc reduce)
(reduce + 0 [1 2 3 4])
(reduce conj {} db)
db
(map (fn [x] (conj (clojure.string/lower-case 1 (get db 1)))) (keys db))
(map (fn [x] (conj 1 (clojure.string/lower-case (get db 1)))) (get keys))
(map (fn [x] (conj 1 (clojure.string/lower-case (db 1)))) (get keys))
(get db 1)
(map (fn [x] (clojure.string/lower-case x)) (get db 1))
(map (fn [z] (conj z 1)) (map (fn [x] (clojure.string/lower-case x)) (get db 1)))
(map (fn [z] (conj z 1 [] )) (map (fn [x] (clojure.string/lower-case x)) (get db 1)))
 (map (fn [x] (clojure.string/lower-case x)) (get db 1))
(into [] (map (fn [x] (clojure.string/lower-case x)) (get db 1)))
(map (fn [z] (conj 1 z [])) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db 1))))
(map (fn [z] (conj [] 1 z)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db 1))))
(map (fn [z] (conj [] z 1)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db 1))))
(map (fn [k] (map (fn [z] (conj [] z k)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db))
(doc flatten)
(flatten (map (fn [k] (map (fn [z] (conj [] z k)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db)))
(into [] (flatten (map (fn [k] (map (fn [z] (conj [] z k)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db))))
(conj {1 2} 3 4)
(conj {1 2} {3 4})
(into {} (flatten (map (fn [k] (map (fn [z] (conj {} z k)) (into {} (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db))))
(into [] (flatten (map (fn [k] (map (fn [z] (conj {} z k)) (into {} (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db))))
(into {} (flatten (map (fn [k] (map (fn [z] (conj [] z k)) (into {} (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db))))
(into {} (flatten (map (fn [k] (map (fn [z] (conj {} z k)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db))))
(into {} (flatten (map (fn [k] (map (fn [z] (conj [] z k)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db))))
(into [] (flatten (map (fn [k] (map (fn [z] (conj [] z k)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db))))
(doc type)
(type (into [] (flatten (map (fn [k] (map (fn [z] (conj [] z k)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db)))))
(type (into [] (flatten (map (fn [k] (map (fn [z] (assoc {} z k)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db)))))
(into [] (flatten (map (fn [k] (map (fn [z] (assoc {} z k)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db))))
(flatten (map (fn [k] (map (fn [z] (assoc {} z k)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db)))
(map (fn [k] (map (fn [z] (assoc {} z k)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db))
(map (fn [k] (map (fn [z] (assoc {} z k)) (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db)
(map (fn [k] (map (fn [z] (assoc {} z k)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db))
(flatten (map (fn [k] (map (fn [z] (assoc {} z k)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db)))
(mapv apply merge (flatten (map (fn [k] (map (fn [z] (assoc {} z k)) (into [] (map (fn [x] (clojure.string/lower-case x)) (get db k))))) (keys db))))
(merge {} {1 2} {3 4})
(type (merge {1 2} {3 4}))
(array-map [1 2 3] [4 5 6])
(array-map (merge [1 2 3] [4 5 6]))
(array-map (concat [1 2 3] [4 5 6]))
(concat [1 2 3] [4 5 6])
(into {} (concat [1 2 3] [4 5 6]))
(array-map (into [] (concat [1 2 3] [4 5 6])))
(array-map ({1 2} {2 3} {3 4}))
(flatten ({1 2} {2 3} {3 4}))
(mapv (fn [v] (apply merge v)) ({1 2} {2 3} {3 4}))
(flatten ({1 2} {2 3}))
(array-map ({1 2} {2 3}))
(array-map {1 2} {2 3})
(array-map (merge {1 2} {2 3}))
(merge {1 2} {2 3} {3 4} {4})
(merge {1 2} {2 3} {3 4})
(assoc {} "world" 1 "gschoolers" 1}
(assoc {} "world" 1 "gschoolers" 1)
(doc new)
(doc reduce-kv)
