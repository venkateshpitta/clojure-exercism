(java.util.Collections/binarySearch [0 1 2 3 4 5 6 7 8] 3)
(java.util.Collections/binarySearch (reverse [0 1 2 3 4 5 6 7 8]) 3)
(java.util.Collections/binarySearch [10 9 8 7 6 5 4 3 2 1 0] 3)
(java.util.Collections/binarySearch [-3 -2 0 1  3 4] 3)
(java.util.Collections/binarySearch [-3 -2 0 1  3 4] 2)
(javadoc java.util.Collections/binarySearch)
(doc java.util.Collections/binarySearch)
(java.util.Collections/binarySearch [-3 -2 0 1  3 4] 2 compare)
(java.util.Collections/binarySearch [-3 -2 0 1  3 4] 3 compare)
(neg? -2)
(neg? 0)
(neg? -0)
(neg? -1)
(>= 1 2)
(>= 2 2)
(nth 2 [2 3 4 5])
(nth [2 3 4 5] 2)
(// 3 2)
(/ 3 2)
(/ 4 2)
(/ 4 3)
(quot 3 2)
(if (odd? 3) quot /)
(apply (if (odd? 3) quot /) 5 2)
((if (odd? 3) quot /) 5 2)
(/ 3 2)
(* 3/2 4)
(nth [1 2 3 4 5 6 7] 7/2)
(type :perfect)
(require 'perfect-numbers)
(require perfect-numbers)
