(set 1 2 3 3 2 1)
(doc set)
(println "23432 %s" "sdfawae")
(set "asdfasdfqwerasdfasdvas;flijo;ijlkj")
(clojure.string/lower-case "The Quick Brown fox jumps over the lazy dog")
(clojure.string/lower-case "The__ Quick_ Brown___ fox-- jumps++ over== the^^ lazy** dog")
(re-matches (re-pattern "[a-zA-Z]*$") (clojure.string/lower-case "The__ Quick_ Brown___ fox-- jumps++ over== the^^ lazy** dog")
)
(re-matches (re-pattern "[a-zA-Z]*$") (clojure.string/lower-case "The__ Quick_ Brown___ fox-- jumps++ over== the^^ lazy** dog"))
(re-matches (re-pattern "[a-zA-Z]*$") (apply str (clojure.string/lower-case "The__ Quick_ Brown___ fox-- jumps++ over== the^^ lazy** dog")))
(re-matches (re-pattern "[a-zA-Z]*$") (str (clojure.string/lower-case "The__ Quick_ Brown___ fox-- jumps++ over== the^^ lazy** dog")))
(clojure.string/lower-case "The__ Quick_ Brown___ fox-- jumps++ over== the^^ lazy** dog")
(filter #(and (<= (compare \a %) 0) (<= (compare % \z))) (clojure.string/lower-case "The__ Quick_ Brown___ fox-- jumps++ over== the^^ lazy** dog"))
(set (filter #(and (<= (compare \a %) 0) (<= (compare % \z))) (clojure.string/lower-case "The__ Quick_ Brown___ fox-- jumps++ over== the^^ lazy** dog")))
(doc distinct)
(distinct '(a a a a a b b b b b b c c c c c c d d d d d))
(doc eduction)
