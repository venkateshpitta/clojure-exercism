(doc repeatedly)
(take 8 (repeatedly "_ "))
(repeat "_ ")
(take 8 (repeat "_ "))
(apply str (take 8 (repeat "_ ")))
(clojure.string/trim (apply str (take 8 (repeat "_ "))))
(defn put-queen [location color]
                      (str (clojure.string/trim
                            (apply str (take (dec location)
                                             (repeat "_ "))))
                           (str color)
                           (clojure.string/trim
                            (apply str (take (- 8 dec)
                                             (repeat "_ "))))))
(put-queen 4 \B)
(defn put-queen [location color]
                      (str (clojure.string/trim
                            (apply str (take (dec location)
                                             (repeat "_ "))))
                           (str color)
                           (clojure.string/trim
                            (apply str (take (- 8 location)
                                             (repeat "_ "))))))
(put-queen 4 \B)
(put-queen 1 \B)
(put-queen 2 \B)
(map #(put-queen % \B) (range 1 9))
(map #(put-queen % \W) (range 1 9))
(take 8 (repeat "_ "))
(apply str (take 8 (repeat "_ ")))
(clojure.string/trim (apply str (take 8 (repeat "_ "))))
(str (clojure.string/trim (apply str (take 8 (repeat "_ ")))) "\n")
(defn blank-line []
    (str
     (clojure.string/trim
      (apply str (take 8 (repeat "_ "))))
     "\n"))
(take 8 (repeat (blank-line)))
(clojure.string/join "" (take 8 (repeat (blank-line))))
(take 8 (blank-line))
(blank-line)
(map #(blank-line) (range 8))
(map #(blank-line) (range 0 8))
(map (blank-line) (range 0 8))
(map (fn [] (blank-line)) (range 0 8))
(repeat (blank-line))
(take 60 (repeat (blank-line)))
(take 10 (repeat (blank-line)))
(take 8 (repeat (blank-line)))
(clojure.string/join "" (take 8 (repeat (blank-line))))
(doc clojure.string/join)
(take -1 (repeat "V"))
(take 0 (repeat "V"))
(take 06 (repeat "V"))
(take 3 (repeat (blank-line)))
(str (take 3 (repeat (blank-line))))
(apply str (take 3 (repeat (blank-line)))))
(apply str (take 3 (repeat (bla)))))
(apply str (take 3 (repeat (blank-line))))
(conj 1 [])
(conj [] 1)
(conj [] [1 2] [2 3])
(flatten [[1 2] [2 3]])
(flatten [[1 2] [2 3]] [[3 4] [3 5]])
(flatten (conj [[1 2] [2 3]] [[3 4] [3 5]]))
(flatten (conj #{} [[1 2] [2 3]] [[3 4] [3 5]]))
(flatten (conj #{} #{[1 2] [2 3]} #{[3 4] [3 5]}))
(conj #{} #{[1 2] [2 3]} #{[3 4] [3 5]})
(doc contains? )
(contains? [[1 2] [3 4]] [3 4])
(filter #(= % [3 4]) [[1 2] [2 3] [3 4]])
(doc abs)
(require 'clojure.math)
(require 'clojure.math.numeric-tower)
