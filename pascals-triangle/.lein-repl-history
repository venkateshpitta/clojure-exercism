(require 'clojure.math.numeric-tower)
(clojure.math.numeric-tower/abs -3)
(require 'pascals-triangle)
(factorial 3)
(pascals-triangle/factorial 4)
(pascals-triangle/factorial 0)
(pascals-triangle/factorial 1)
(pascals-triangle/factorial 2)
(:reload 'pascals-triangle)
(pascals-triangle/factorial 3)
(doc clojure.math.numeric-tower/MathFunctions)
(require 'clojure.math.numeric-tower/MathFunctions)
(require 'pascals-triangle)
(pascals-triangle/factorial 3)
(require 'pascals-triangle)
(pascals-triangle/factorial 3)
(require 'pascals-triangle)
(pascals-triangle/factorial 3)
(require 'pascals-triangle)
(pascals-triangle/factorial 3)
(defn fac [n]
(loop [nn n ac 1]
(if (<= 1 nn) ac (recur (dec nn) (* ac nn)))))
(fac 3)
(require 'pascals-triangle)
(pascals-triangle/factorial 3)
(doc *')
(doc +')
(pascals-triangle/factorial 4)
(defn triangle []
(iterate pascals-triangle/row inc 1)
)
(take 6 triangle)
(triangle)
(doc iterate)
(defn triangle []
(map pascals-triangle/row (iterate! inc 1)))
(defn triangle []
(map pascals-triangle/row (iterate inc 1)))
(take 6 triangle)
(take 6 (triangle))
(require 'pascals-triangle)
(pascals-triangle/row 7)
(defn triangle [] (map pascals-triangle/row (iterate inc 1)))
(take 7 (triangle))
(def triangle (fn [] (map pascals-triangle/row (iterate inc 1))))
(type triangle)
(class triangle)
triangle
(take 5 triangle)
(take 5 (triangle))
(into [] (take 5 (triangle)))
(def triangle (map pascals-triangle/row (iterate inc 1)))
triangle
(take 5 triangle)
