(filter #"\p{Alnum}" "Ve&^&%*&^&^%$*%$#$#@!nkatesh88")
(filter #"\p{Alnum}" ["Ve&^&%*&^&^%$*%$#$#@!nkatesh88"])
(filter (fn [x] #"\p{Alnum}") ["Ve&^&%*&^&^%$*%$#$#@!nkatesh88"])
(filter (fn [x] (re-match (re-pattern "[A-Za-z0-9]*"))) ["Ve&^&%*&^&^%$*%$#$#@!nkatesh88"])
(filter (fn [x] (re-find (re-pattern "[A-Za-z0-9]*") x)) ["Ve&^&%*&^&^%$*%$#$#@!nkatesh88"])
(filter #(re-matches #"\p{Alnum}" %) "Vpit3833(*&^*&^%$&^$*^%*"))
(filter #(re-matches #"\p{Alnum}" %) "Vpit3833*&^*&^%$&^$*^%*"))
(filter #(re-matches #"\p{Alnum}" %) "Vpit3833*&^*&^%$&^*^%*"))
(filter #(re-matches #"\p{Alnum}" %) "Vpit3833*&^*&^%$&^*^%*")
(filter #(re-matches #"\p{Alnum}" %) ["Vpit3833*&^*&^%$&^*^%*"])
(take-while #(Character/isJavaLetterOrDigit %) "vpiT3833^^%%$$##")
(apply str (take-while #(Character/isJavaLetterOrDigit %) "vpiT3833^^%%$$##"))
(clojure.string/lower-case (apply str (take-while #(Character/isJavaLetterOrDigit %) "vpiT3833^^%%$$##")))
(clojure.string/lower-case (apply str (take-while #(Character/isJavaLetterOrDigit %) "vpiT3833^  ^  %  %,$.$##")))
(clojure.string/lower-case (apply str (take-while #(Character/isJavaLetterOrDigit %) "v, p. i, T. 3, 8. 3, 3. ^  ^  %  %,$.$##")))
(clojure.string/lower-case (apply str (take #(Character/isJavaLetterOrDigit %) "v, p. i, T. 3, 8. 3, 3. ^  ^  %  %,$.$##")))
(clojure.string/lower-case (apply str (filter #(Character/isJavaLetterOrDigit %) "v, p. i, T. 3, 8. 3, 3. ^  ^  %  %,$.$##")))
(doc Character/isJavaLetterOrDigit)
(javadoc Character/isJavaLetterOrDigit)
(doc Character/isLetter)
(Character/isLetter \a)
(Character/isLetter \9)
(Character/isLetter "23")
(Character/isAlphabetic \9)
(Character/isAlphabetic \a)
(require 'clojure.math.numeric-tower)
(clojure.math.numeric-tower/sqrt 4)
(clojure.math.numeric-tower/sqrt 5)
(clojure.math.numeric-tower/ceil (clojure.math.numeric-tower/sqrt 5))
(int (clojure.math.numeric-tower/ceil (clojure.math.numeric-tower/sqrt 5)))
(split-at 5 "VenkateshPittaAmarnath")
(first (split-at 5 "VenkateshPittaAmarnath"))
(str (first (split-at 5 "VenkateshPittaAmarnath")))
(apply str (first (split-at 5 "VenkateshPittaAmarnath")))
(split-at 5 "never vex thine heart with idle woes.")
(count (split-at 5 "never vex thine heart with idle woes."))
(count (split-at 5 "ne"))
(split-at 5 "ne")
(doc head)
(doc first)
(doc car)
(doc cdr)
(first [])
(apply str (first []))
(rest (split-at 3 "Venkatesh"))
(apply str (rest (split-at 3 "Venkatesh")))
(apply str (first (rest (split-at 3 "Venkatesh"))))
(rest (split-at 3 "Venkatesh"))
(rest (split-at 8 "Venkatesh"))
(rest (split-at 9 "Venkatesh"))
(empty? (rest (split-at 9 "Venkatesh")))
(first (split-at 4 "Venkatesh"))
(str (first (split-at 4 "Venkatesh")))
(apply str (first (split-at 4 "Venkatesh")))
(apply str (rest (split-at 4 "Venkatesh")))
(apply str (frist (rest (split-at 4 "Venkatesh"))))
(apply str (first (rest (split-at 4 "Venkatesh"))))
(apply str (first (rest (split-at 10 "Venkatesh"))))
(empty? (apply str (first (rest (split-at 10 "Venkatesh"))))0
)
(empty? (apply str (first (rest (split-at 10 "Venkatesh"))))
)
(conj "P" " " "A" " " "Venkatesh" [])
(conj "P" [])
(conj [\P \  \A \  \V]  [])
(flatten (conj [\P \  \A \  \V]  []))
(map #(apply str) (conj [\P \  \A \  \V]  []))
(map #(apply str %) (conj [\P \  \A \  \V]  []))
(sort 3 4 4)
(sort [4 3 3])
(sort [2 2 1])
(conj "A" [])
(conj [] "A")
(doc subs)
(nth 3 "Venkatesh")
(nth "Venkatesh" 3)
(nth "Venkatesh" 100)
