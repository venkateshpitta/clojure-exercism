(doc rand)
(doc rand-nth)
(rand-nth "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(require 'java/security/SecureRandom)
(import "java.security.SecureRandom")
(doc string/format )
(doc string)
(doc java/string)
(doc java)
(doc javadoc)
(javadoc string)
(format "%3d" 0)
(format "%03d" 0)
(format "%03d" 45)
(format "%03d" 305)
(format "%03d" 35)
(def alphas "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
(str (rand-nth alphas) (rand-nth alphas) (format "%03d" (rand-int 999)))
(in "A" alphas)
(contains? "A" alphas)
(contains? alphas "A")
(contains? (into [] alphas) "A")
(contains? (into [] alphas) ["A"])
(doc subs)
(def names [])
(conj names (str (rand-nth alphas) (rand-nth alphas) (format "%03d" (rand-int 999))))
(concat names (str (rand-nth alphas) (rand-nth alphas) (format "%03d" (rand-int 999))))
(cons names (str (rand-nth alphas) (rand-nth alphas) (format "%03d" (rand-int 999))))
(conj names (str (rand-nth alphas) (rand-nth alphas) (format "%03d" (rand-int 999))))
(contains? '(1 2 3 4 5) 3)
(contains? [1 2 3 4 5] 3)
(doc set)
(doc set*)
(doc let*)
(doc let)
(doc @)
(doc '@)
(doc '@))
(doc '@)))
(doc \@)
(doc @)
(doc "@")
(doc atom)
@"W"
@'q
